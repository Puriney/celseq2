{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\u00b6\n\n\nThis is \ncelseq2\n, a Python framework for generating the UMI count matrix\nfrom CEL-Seq2 \n1\n sequencing data. We believe data digestion\nshould be automated, and it should be done in a manner not just computational\nefficient, but also user-friendly and developer-friendly.\n\n\nInstallation\n\u00b6\n\n\ngit clone git@github.com:yanailab/celseq2.git\n\ncd\n celseq2\npip install ./\n\n\n\n\n\nQuick Start\n\u00b6\n\n\nRunning \ncelseq2\n pipeline is as easy as 1-2-3. Below is the visualization of\nthe experiment design as same as the\n\nsample sheet\n\nused in last generation of the pipeline (\nCEL-Seq-pipeline\n) as example.\n\n\n\n\n\n\n\nThe user had two biological samples which could come from two different\nexperiments, two time-points, two types of tissues, or even two labs. They were\ndenoted as squares and circles, respectively. Each sample had 9 cells.\n\n\nIn principle, what the user would expect as final output was one UMI count matrix\nfor each sample, which meant two UMI matrices in total in this example.\n\n\nDuring the CEL-Seq2 experiment, all cells were placed in one 96-well cell plate.\nThey were labeled with same sequencing barcodes (shown as orange plate)\nbut each cell was labeled with its own CEL-Seq2 cell barcode, so that all of them\ncould be sequenced together without losing identities. In details, the\nnine cells from Experiment-1 were labeled with CEL-Seq2 cell barcodes indexed\nfrom 1 to 9, respectively, while the other nine cells from Experiment-2 were\nlabeled with cell barcodes 10 to 18.\n\n\nFinally the library was distributed in two lanes (purple and dark gray bar) of a\nsequencer, and got sequenced, which resulted in two sets of CEL-Seq2 data (per\nlane per sequencing barcode).\n\n\nWhat would the pipeline of \ncelseq2\n do for the user was to generate UMI-count\nmatrix per experiment with the two sets of CEL-Seq2 data as input.\n\n\nStep-1: Specify Global Configuration of Workflow\n\u00b6\n\n\nRun \nnew-configuration-file\n command to initiate configuration file (YAML\nformat), which specifies the details of CEL-Seq2 techniques the users perform,\ne.g. the cell barcodes sequence dictionary, and transcriptome annotation\ninformation for quantifying UMIs, etc.\n\n\nThis configuration can be shared and used more than once as long as user is\nrunning pipeline on same species.\n\n\nnew-configuration-file -o /path/to/wonderful_CEL-Seq2_config.yaml\n\n\n\n\n\nExample of configuration is \nhere\n.\n\n\nExample of CEL-Seq2 cell barcodes sequence dictionary is \nhere\n.\n\n\nRead \n\"Setup Configuration\"\n\nfor full instructions.\n\n\nStep-2: Define Experiment Table\n\u00b6\n\n\nRun \nnew-experiment-table\n command to initiate a table (space/tab separated\nfile format) specifying the experiment layout.\n\n\nnew-experiment-table -o /path/to/wonderful_experiment_table.txt\n\n\n\n\n\nFill information into the generated experiment table file row by row.\n\n\nThe content of experiment table in this example could be:\n\n\n\n\n\n\n\n\nSAMPLE_NAME\n\n\nCELL_BARCODES_INDEX\n\n\nR1\n\n\nR2\n\n\n\n\n\n\n\n\n\n\nwonderful_experiment1\n\n\n1-9\n\n\npath/to/lane1-R1.fastq.gz\n\n\npath/to/lane1-R2.fastq.gz\n\n\n\n\n\n\nwonderful_experiment2\n\n\n10-18\n\n\npath/to/lane1-R1.fastq.gz\n\n\npath/to/lane1-R2.fastq.gz\n\n\n\n\n\n\nwonderful_experiment1\n\n\n1-9\n\n\npath/to/lane2-R1.fastq.gz\n\n\npath/to/lane2-R2.fastq.gz\n\n\n\n\n\n\nwonderful_experiment2\n\n\n10-18\n\n\npath/to/lane2-R1.fastq.gz\n\n\npath/to/lane2-R2.fastq.gz\n\n\n\n\n\n\n\n\nRead \n\"Experiment Table Specification\"\n\nfor full instructions when more complexed experiment designs take place.\n\n\nStep-3: Run Pipeline of \ncelseq2\n\u00b6\n\n\nLaunch pipeline in the computing node which performs 10 tasks in parallel.\n\n\ncelseq2 --config-file /path/to/wonderful_CEL-Seq2_config.yaml \n\\\n\n    --experiment-table /path/to/wonderful_experiment_table.txt \n\\\n\n    --output-dir /path/to/result_dir \n\\\n\n    -j \n10\n\n\n\n\n\n\nRead \n\"Launch Pipeline\"\n\nfor full instructions to see how to submit jobs to cluster, or preview how many\ntasks are going to be scheduled.\n\n\nResults\n\u00b6\n\n\nAll the results are saved under \n/path/to/result_dir\n that user\nspecified, which has folder structure:\n\n\n\u251c\u2500\u2500 annotation\n\u251c\u2500\u2500 expr                  # <== Here saves all the UMI count matrices\n\u251c\u2500\u2500 input\n\u251c\u2500\u2500 small_diagnose\n\u251c\u2500\u2500 small_fq\n\u251c\u2500\u2500 small_log\n\u251c\u2500\u2500 small_sam\n\u251c\u2500\u2500 small_umi_count\n\u2514\u2500\u2500 small_umi_set\n\n\n\n\n\nIn particular, \nUMI count matrix\n for each of the experiments is\nsaved in both CSV and HDF5 format and exported to \nexpr/\n folder.\n\n\nexpr/\n\u251c\u2500\u2500 wonderful_experiment1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv          # <== UMI count matrix for cells denoted as squares\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.h5\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 item-1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 item-3\n\u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n\u2502\u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n\u2514\u2500\u2500 wonderful_experiment2\n    \u251c\u2500\u2500 expr.csv          # <== UMI count matrix for cells denoted as circles\n    \u251c\u2500\u2500 expr.h5\n \u00a0\u00a0 \u251c\u2500\u2500 item-2\n \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n    \u2514\u2500\u2500 item-4\n     \u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n     \u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n\n\n\n\n\nResults of \nitem-X\n are useful to assess variation when FASTQ\nfiles from multiple lanes, or technical/biological replicates are present.\n\n\nAuthors\n\u00b6\n\n\nSee \nhttps://github.com/yanailab/celseq2/blob/master/AUTHORS\n\n\nLicense\n\u00b6\n\n\nSee \nhttps://github.com/yanailab/celseq2/blob/master/LICENSE\n\n\n\n\n\n\n\n\n\n\nHashimshony, T. et al. CEL-Seq2: sensitive highly-\nmultiplexed single-cell RNA-Seq. Genome Biol. 17, 77 (2016).\n\nhttps://doi.org/10.1186/s13059-016-0938-8\n\u00a0\n\u21a9",
            "title": "Home"
        },
        {
            "location": "/#overview",
            "text": "This is  celseq2 , a Python framework for generating the UMI count matrix\nfrom CEL-Seq2  1  sequencing data. We believe data digestion\nshould be automated, and it should be done in a manner not just computational\nefficient, but also user-friendly and developer-friendly.",
            "title": "Overview"
        },
        {
            "location": "/#installation",
            "text": "git clone git@github.com:yanailab/celseq2.git cd  celseq2\npip install ./",
            "title": "Installation"
        },
        {
            "location": "/#quick-start",
            "text": "Running  celseq2  pipeline is as easy as 1-2-3. Below is the visualization of\nthe experiment design as same as the sample sheet \nused in last generation of the pipeline ( CEL-Seq-pipeline ) as example.    The user had two biological samples which could come from two different\nexperiments, two time-points, two types of tissues, or even two labs. They were\ndenoted as squares and circles, respectively. Each sample had 9 cells.  In principle, what the user would expect as final output was one UMI count matrix\nfor each sample, which meant two UMI matrices in total in this example.  During the CEL-Seq2 experiment, all cells were placed in one 96-well cell plate.\nThey were labeled with same sequencing barcodes (shown as orange plate)\nbut each cell was labeled with its own CEL-Seq2 cell barcode, so that all of them\ncould be sequenced together without losing identities. In details, the\nnine cells from Experiment-1 were labeled with CEL-Seq2 cell barcodes indexed\nfrom 1 to 9, respectively, while the other nine cells from Experiment-2 were\nlabeled with cell barcodes 10 to 18.  Finally the library was distributed in two lanes (purple and dark gray bar) of a\nsequencer, and got sequenced, which resulted in two sets of CEL-Seq2 data (per\nlane per sequencing barcode).  What would the pipeline of  celseq2  do for the user was to generate UMI-count\nmatrix per experiment with the two sets of CEL-Seq2 data as input.",
            "title": "Quick Start"
        },
        {
            "location": "/#step-1-specify-global-configuration-of-workflow",
            "text": "Run  new-configuration-file  command to initiate configuration file (YAML\nformat), which specifies the details of CEL-Seq2 techniques the users perform,\ne.g. the cell barcodes sequence dictionary, and transcriptome annotation\ninformation for quantifying UMIs, etc.  This configuration can be shared and used more than once as long as user is\nrunning pipeline on same species.  new-configuration-file -o /path/to/wonderful_CEL-Seq2_config.yaml  Example of configuration is  here .  Example of CEL-Seq2 cell barcodes sequence dictionary is  here .  Read  \"Setup Configuration\" \nfor full instructions.",
            "title": "Step-1: Specify Global Configuration of Workflow"
        },
        {
            "location": "/#step-2-define-experiment-table",
            "text": "Run  new-experiment-table  command to initiate a table (space/tab separated\nfile format) specifying the experiment layout.  new-experiment-table -o /path/to/wonderful_experiment_table.txt  Fill information into the generated experiment table file row by row.  The content of experiment table in this example could be:     SAMPLE_NAME  CELL_BARCODES_INDEX  R1  R2      wonderful_experiment1  1-9  path/to/lane1-R1.fastq.gz  path/to/lane1-R2.fastq.gz    wonderful_experiment2  10-18  path/to/lane1-R1.fastq.gz  path/to/lane1-R2.fastq.gz    wonderful_experiment1  1-9  path/to/lane2-R1.fastq.gz  path/to/lane2-R2.fastq.gz    wonderful_experiment2  10-18  path/to/lane2-R1.fastq.gz  path/to/lane2-R2.fastq.gz     Read  \"Experiment Table Specification\" \nfor full instructions when more complexed experiment designs take place.",
            "title": "Step-2: Define Experiment Table"
        },
        {
            "location": "/#step-3-run-pipeline-of-celseq2",
            "text": "Launch pipeline in the computing node which performs 10 tasks in parallel.  celseq2 --config-file /path/to/wonderful_CEL-Seq2_config.yaml  \\ \n    --experiment-table /path/to/wonderful_experiment_table.txt  \\ \n    --output-dir /path/to/result_dir  \\ \n    -j  10   Read  \"Launch Pipeline\" \nfor full instructions to see how to submit jobs to cluster, or preview how many\ntasks are going to be scheduled.",
            "title": "Step-3: Run Pipeline of celseq2"
        },
        {
            "location": "/#results",
            "text": "All the results are saved under  /path/to/result_dir  that user\nspecified, which has folder structure:  \u251c\u2500\u2500 annotation\n\u251c\u2500\u2500 expr                  # <== Here saves all the UMI count matrices\n\u251c\u2500\u2500 input\n\u251c\u2500\u2500 small_diagnose\n\u251c\u2500\u2500 small_fq\n\u251c\u2500\u2500 small_log\n\u251c\u2500\u2500 small_sam\n\u251c\u2500\u2500 small_umi_count\n\u2514\u2500\u2500 small_umi_set  In particular,  UMI count matrix  for each of the experiments is\nsaved in both CSV and HDF5 format and exported to  expr/  folder.  expr/\n\u251c\u2500\u2500 wonderful_experiment1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv          # <== UMI count matrix for cells denoted as squares\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.h5\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 item-1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 item-3\n\u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n\u2502\u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n\u2514\u2500\u2500 wonderful_experiment2\n    \u251c\u2500\u2500 expr.csv          # <== UMI count matrix for cells denoted as circles\n    \u251c\u2500\u2500 expr.h5\n \u00a0\u00a0 \u251c\u2500\u2500 item-2\n \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n    \u2514\u2500\u2500 item-4\n     \u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n     \u00a0\u00a0 \u2514\u2500\u2500 expr.h5  Results of  item-X  are useful to assess variation when FASTQ\nfiles from multiple lanes, or technical/biological replicates are present.",
            "title": "Results"
        },
        {
            "location": "/#authors",
            "text": "See  https://github.com/yanailab/celseq2/blob/master/AUTHORS",
            "title": "Authors"
        },
        {
            "location": "/#license",
            "text": "See  https://github.com/yanailab/celseq2/blob/master/LICENSE      Hashimshony, T. et al. CEL-Seq2: sensitive highly-\nmultiplexed single-cell RNA-Seq. Genome Biol. 17, 77 (2016). https://doi.org/10.1186/s13059-016-0938-8 \u00a0 \u21a9",
            "title": "License"
        },
        {
            "location": "/user_guide/setup_config/",
            "text": "Configuration\n\u00b6\n\n\nLearn how to setup a configuration file required by\ncelseq2\n as input. The\nconfiguration file is global and can be reusable.\n\n\n\n\nWhy configuration\n\u00b6\n\n\nGlobal configuration file has 3 purposes:\n\n\n\n\nTell \ncelseq2\n how CEL-Seq2 is performed. For example, what are the sequences\n   of the cell barcodes in use?\n\n\nSpecify bioinformatics details of \ncelseq2\n. For example, what is the\n   absolute path to the genome annotation on your computer?\n\n\nConfiguration file is \nreusable\n as long as both experimental and\n   bioinformatics protocol are applied on same type of species.\n\n\n\n\nCreate a configuration file from template\n\u00b6\n\n\ncelseq2\n provides a bash command \nnew-configuration-file\n to initiate\na new configuration template so that user can fill in details.\n\n\nnew-configuration-file -o /path/to/my_wonderful_config.yaml\n\n\n\n\n\nHow to specify configuration\n\u00b6\n\n\nHere is a \nreal\nexample\n\nas global configuration.\n\n\n###########################\n\n\n## CEL-seq2 Tech Setting\n\n\n###########################\n\n\nBC_INDEX_FPATH\n:\n \n'yanailab/refs/barcodes/barcodes_cel-seq_umis96.tab'\n\n\nBC_IDs_DEFAULT\n:\n \n'1-96'\n\n\nUMI_LENGTH\n:\n \n6\n\n\nBC_LENGTH\n:\n \n6\n\n\n\n###########################\n\n\n## Bowties Index\n\n\n###########################\n\n\nBOWTIE2_INDEX_PREFIX\n:\n \n'yanailab/refs/danio_rerio/danRer10_87/genome/Danio_rerio.GRCz10.dna.toplevel'\n\n\nBOWTIE2\n:\n \n'/local/apps/bowtie2/2.3.1/bowtie2'\n\n\n\n###########################\n\n\n## Annotations\n\n\n###########################\n\n\nGFF\n:\n \n'yanailab/refs/danio_rerio/danRer10_87/gtf/Danio_rerio.GRCz10.87.gtf.gz'\n\n\n\n###########################\n\n\n## Demultiplexing\n\n\n###########################\n\n\nFASTQ_QUAL_MIN_OF_BC\n:\n \n10\n\n\nCUT_LENGTH\n:\n \n35\n\n\n\n###########################\n\n\n## Alignment\n\n\n###########################\n\n\nALIGNER\n:\n \n'bowtie2'\n\n\n\n###########################\n\n\n## UMI Count\n\n\n###########################\n\n\nALN_QUAL_MIN\n:\n \n0\n\n\n\n\n\n\nExplanations of key parameters\n\u00b6\n\n\nBC_INDEX_FPATH\n\u00b6\n\n\nAbsolute file path to a space/tab separated file which saves all the sequences\nfor cell barcodes.\n\n\nHere are first 11 lines of the content of\n\nBC_INDEX_FPATH\n\n\n#barcode_id sequence\n1   AGACTC\n2   AGCTAG\n3   AGCTCA\n4   AGCTTC\n5   CATGAG\n6   CATGCA\n7   CATGTC\n8   CACTAG\n9   CAGATC\n10  TCACAG\n\n\n\n\n\nUMI_LENGTH\n, \nBC_LENGTH\n, \nCUT_LENGTH\n\u00b6\n\n\nCEL-Seq2 sequences in a pair-end manner. Read-1 records the sequences of UMIs and\ncell barcodes, while read-2 records the sequences of RNA transcripts. \ncelseq2\n\nwill cut a subsequence with length of \nCUT_LENGTH\n since the left-most end of\nread-2, which will be ready for alignment.",
            "title": "Setup configuration"
        },
        {
            "location": "/user_guide/setup_config/#configuration",
            "text": "Learn how to setup a configuration file required by celseq2  as input. The\nconfiguration file is global and can be reusable.",
            "title": "Configuration"
        },
        {
            "location": "/user_guide/setup_config/#why-configuration",
            "text": "Global configuration file has 3 purposes:   Tell  celseq2  how CEL-Seq2 is performed. For example, what are the sequences\n   of the cell barcodes in use?  Specify bioinformatics details of  celseq2 . For example, what is the\n   absolute path to the genome annotation on your computer?  Configuration file is  reusable  as long as both experimental and\n   bioinformatics protocol are applied on same type of species.",
            "title": "Why configuration"
        },
        {
            "location": "/user_guide/setup_config/#create-a-configuration-file-from-template",
            "text": "celseq2  provides a bash command  new-configuration-file  to initiate\na new configuration template so that user can fill in details.  new-configuration-file -o /path/to/my_wonderful_config.yaml",
            "title": "Create a configuration file from template"
        },
        {
            "location": "/user_guide/setup_config/#how-to-specify-configuration",
            "text": "Here is a  real\nexample \nas global configuration.  ###########################  ## CEL-seq2 Tech Setting  ###########################  BC_INDEX_FPATH :   'yanailab/refs/barcodes/barcodes_cel-seq_umis96.tab'  BC_IDs_DEFAULT :   '1-96'  UMI_LENGTH :   6  BC_LENGTH :   6  ###########################  ## Bowties Index  ###########################  BOWTIE2_INDEX_PREFIX :   'yanailab/refs/danio_rerio/danRer10_87/genome/Danio_rerio.GRCz10.dna.toplevel'  BOWTIE2 :   '/local/apps/bowtie2/2.3.1/bowtie2'  ###########################  ## Annotations  ###########################  GFF :   'yanailab/refs/danio_rerio/danRer10_87/gtf/Danio_rerio.GRCz10.87.gtf.gz'  ###########################  ## Demultiplexing  ###########################  FASTQ_QUAL_MIN_OF_BC :   10  CUT_LENGTH :   35  ###########################  ## Alignment  ###########################  ALIGNER :   'bowtie2'  ###########################  ## UMI Count  ###########################  ALN_QUAL_MIN :   0",
            "title": "How to specify configuration"
        },
        {
            "location": "/user_guide/setup_config/#explanations-of-key-parameters",
            "text": "",
            "title": "Explanations of key parameters"
        },
        {
            "location": "/user_guide/setup_config/#bc_index_fpath",
            "text": "Absolute file path to a space/tab separated file which saves all the sequences\nfor cell barcodes.  Here are first 11 lines of the content of BC_INDEX_FPATH  #barcode_id sequence\n1   AGACTC\n2   AGCTAG\n3   AGCTCA\n4   AGCTTC\n5   CATGAG\n6   CATGCA\n7   CATGTC\n8   CACTAG\n9   CAGATC\n10  TCACAG",
            "title": "BC_INDEX_FPATH"
        },
        {
            "location": "/user_guide/setup_config/#umi_length-bc_length-cut_length",
            "text": "CEL-Seq2 sequences in a pair-end manner. Read-1 records the sequences of UMIs and\ncell barcodes, while read-2 records the sequences of RNA transcripts.  celseq2 \nwill cut a subsequence with length of  CUT_LENGTH  since the left-most end of\nread-2, which will be ready for alignment.",
            "title": "UMI_LENGTH, BC_LENGTH, CUT_LENGTH"
        },
        {
            "location": "/user_guide/experiment_table/",
            "text": "Experiment Table\n\u00b6\n\n\nLearn how to translate any experiment design to \ncelseq2\n in an easy way.\n\n\n\n\nWhy experiment table\n\u00b6\n\n\nExperiment table has 3 purposes:\n\n\n\n\nSpecify the absolute paths of input CEL-Seq2 data.\n\n\nTranslate the overall design of experiments to format that \ncelseq2\n can\n   understand, so that \ncelseq2\n can generate the expected layout of UMI-count\n   matrix.\n\n\nProvide an user-friendly way to finish the two above goals.\n\n\n\n\nExperiment table is in particular convenient for complexed experiment design\n   where more than one experiment conditions with (or without)\n   biological/technical replicates present.\n\n\nCreate an experiment table from template\n\u00b6\n\n\ncelseq2\n provides a bash command \nnew-experiment-table\n to initiate\na new experiment table.\n\n\nnew-experiment-table -o /path/to/wonderful_experiment_table.txt\n\n\n\n\n\nIt is space/tab separated text file. Modify it and fill in details.\n\n\nSAMPLE_NAME CELL_BARCODES_INDEX R1  R2\nwonderful_experiment1   1,8,2-7 path/to/x-1-r1.fastq.gz path/to/x-1-r2.fastq.gz\nwonderful_experiment1   1-8 path/to/x-3-r1.fastq.gz path/to/x-3-r2.fastq.gz\nwonderful_experiment2   95-96,1-94,10   path/to/y-2-r1.fastq.gz path/to/y-2-r2.fastq.gz\nwonderful_experiment2   1-96    path/to/y-5-r1.fastq.gz path/to/y-5-r2.fastq.gz\n\n\n\n\n\n\n\nAttention\n\n\n\n\nHeader names (\nSAMPLE_NAME\n, \nCELL_BARCODES_INDEX\n, \nR1\n, \nR2\n) are NOT\n  allowed to be modified or deleted.\n\n\nEach slot cannot contain spaces.\n\n\n\n\n\n\nHow to specify experiment table\n\u00b6\n\n\nUser can get familiar with how to specify experiment table by walking through the\nfollowing three examples.\n\n\n\n\nHint\n\n\nWhen specify each row of experiment table, keep a formula in mind:\n\n\nFor input reads file \nX\n, claim that cells with barcode indexes from \ni\n\nto \nj\n come from experiment \nY\n.\n\n\n\n\nExample 0\n\u00b6\n\n\nIn Example-0, users will learn how to translate a experiment design to a\nexperiment table that \ncelseq2\n can understand.\n\n\n\n\n\n\nAs shown in above diagram, this is how the experiment on wet lab side is\nperformed. There are two groups of cells from experiment-1 and experiment-2,\nwhich are colored by blue and orange, respectively. Experiment-1 (blue) has 8\ncells while experiment-2 (orange) has 96 cells.\n\n\nUser wants to quantify the two groups separately yet have them sequenced\ntogether. Here is a possible experiment design. First, during CEL-Seq2\nexperiment, the 8 cells of experiment-1 are labeled with cell barcodes indexed\nfrom 1 to 8 of cell barcodes \ndictionary\n, while\nthe 96 cells of experiment-2 are labeled with barcodes indexed from 1 to 96.\nSecond, the two groups of cells are further labeled with different Illumina\nsequencing barcodes (denoted as blue and orange circles) and finally are\nsequenced in the same one lane (colored in green) of sequencer. As a result, user\nhas two sets of CEL-Seq2 FASTQ reads.\n\n\nThe goal of experiment table is make \ncelseq2\n be aware of where to find the two\nsets of reads, and more importantly understand the entire experiment design, so\nthat \ncelseq2\n finally generates two UMI-count matrix for the two experiments.\n\n\nThis is the example content of experiment table that user should prepare in this\ncase study.\n\n\n\n\n\n\n\n\nSAMPLE_NAME\n\n\nCELL_BARCODES_INDEX\n\n\nR1\n\n\nR2\n\n\n\n\n\n\n\n\n\n\nexperiment1 \n\n\n1-8\n\n\npath/to/sampleX-lane2-R1.fastq.gz   \n\n\npath/to/sampleX-lane2-R2.fastq.gz   \n\n\n\n\n\n\nexperiment2 \n\n\n1-96\n\n\npath/to/sampleY-lane2-R1.fastq.gz   \n\n\npath/to/sampleY-lane2-R2.fastq.gz   \n\n\n\n\n\n\n\n\n\n\nInfo\n\n\nIt is free to \nclaim\n less or more cells in \nCELL_BARCODES_INDEX\n column.\nUsers do not have to claim the exact cells that are truly present in\nexperiment. For instance, \n20-96\n, instead of \n1-96\n, could be claimed in the\nabove experiment-2, if it were believed that cells \n1-19\n are not in good\nshape during cell preparation and should be ignored.\n\n\n\n\n\n\nInfo\n\n\ncelseq2\n understands the most human ways to specify cell barcode index. For\nexample, all the following formats are equivalent to \n1-8\n:\n\n\n\n\n8-1\n: reversed range\n\n\n1,2,3,4-8\n: individual + range\n\n\n8,1,7-2,3-6\n: redundancy is tolerant\n\n\n\n\n\n\nExample 1\n\u00b6\n\n\nExample-1 is conceived on top of \nExample-0\n. Here users will know\nabout how \nreplicates\n are specified to \ncelseq2\n.\n\n\nThe experiment flow is same, except that the two groups are mixed together first\nand then get sequenced in three lanes instead of one lane. Therefore, user has\nsix sets of CEL-Seq2 FASTQ reads.\n\n\n\n\n\n\n\nThe example content of experiment table in this case study is:\n\n\n\n\n\n\n\n\nSAMPLE_NAME\n\n\nCELL_BARCODES_INDEX\n\n\nR1\n\n\nR2\n\n\n\n\n\n\n\n\n\n\nexperiment1 \n\n\n1,8,2-7\n\n\npath/to/x-1-r1.fastq.gz \n\n\npath/to/x-1-r2.fastq.gz \n\n\n\n\n\n\nexperiment1 \n\n\n8,7,6,5,4,3,2,1\n\n\npath/to/x-2-r1.fastq.gz \n\n\npath/to/x-2-r2.fastq.gz \n\n\n\n\n\n\nexperiment1 \n\n\n1-8\n\n\npath/to/x-3-r1.fastq.gz \n\n\npath/to/x-3-r2.fastq.gz \n\n\n\n\n\n\nexperiment2 \n\n\n1-96\n\n\npath/to/y-1-r1.fastq.gz   \n\n\npath/to/y-2-r2.fastq.gz   \n\n\n\n\n\n\nexperiment2 \n\n\n95-96,94-1,10\n\n\npath/to/y-2-r1.fastq.gz   \n\n\npath/to/y-2-r2.fastq.gz   \n\n\n\n\n\n\nexperiment2 \n\n\n1-96\n\n\npath/to/y-3-r1.fastq.gz   \n\n\npath/to/y-3-r2.fastq.gz   \n\n\n\n\n\n\n\n\n\n\nHint\n\n\nThe idea of \"lane\" in this case study could be adapted to any type of\nbiological / technical replicates.\n\n\n\n\nExample 2\n\u00b6\n\n\nExample-2 is closer to a real experiment with complexed design to handle possible\nbatch effect. However, user will still find it pretty easy to define the\nexperiment table.\n\n\n\n\n\n\n\nUser has two groups of cells named E1 and E2, respectively. E1 (squares) and E2\n(circles) are generated at two different conditions, and both have 96 cells. The\nultimate goal is to compare and find the possible gene expression differences in\nsingle-cell level between the two conditions, therefore batch effect should be\nalleviated as much as possible.\n\n\nHere is a possible experiment design. First, only 48 cells of each condition are\nlocated in same one 96-well cell plate. This is to handle possible batch effect\nduring cell preparation. Second, 96 cells of each plate are labeled with cell\nbarcodes 1-96 as usual. Third, each plate has its own Illumina sequencing barcode\n(colored in yellow and green). This is similar to \nExample-0\n.\nFinally, all cells are mixed together and get sequenced in two lanes (colored in\npurple and black). This is similar to \nExample-1\n.\n\n\nThe experiment design gives user four sets of CEL-Seq2 reads.\n\n\nDespite of the complexed flow, the example content of experiment table in this\ncase study is still as easy as:\n\n\n\n\n\n\n\n\nSAMPLE_NAME\n\n\nCELL_BARCODES_INDEX\n\n\nR1\n\n\nR2\n\n\n\n\n\n\n\n\n\n\nE1 \n\n\n1-48\n\n\nS1_L001_R1.fastq.gz   \n\n\nS1_L001_R2.fastq.gz   \n\n\n\n\n\n\nE2  \n\n\n49-96\n\n\nS1_L001_R1.fastq.gz   \n\n\nS1_L001_R2.fastq.gz   \n\n\n\n\n\n\nE1 \n\n\n1-48\n\n\nS1_L002_R1.fastq.gz   \n\n\nS1_L002_R2.fastq.gz   \n\n\n\n\n\n\nE2  \n\n\n49-96\n\n\nS1_L002_R1.fastq.gz   \n\n\nS1_L002_R2.fastq.gz   \n\n\n\n\n\n\nE1 \n\n\n49-96\n\n\nS2_L001_R1.fastq.gz   \n\n\nS2_L001_R2.fastq.gz   \n\n\n\n\n\n\nE2     \n\n\n1-48\n\n\nS2_L001_R1.fastq.gz       \n\n\nS2_L001_R2.fastq.gz       \n\n\n\n\n\n\nE1 \n\n\n49-96\n\n\nS2_L002_R1.fastq.gz   \n\n\nS2_L002_R2.fastq.gz   \n\n\n\n\n\n\nE2 \n\n\n1-48\n\n\nS2_L002_R1.fastq.gz   \n\n\nS2_L002_R2.fastq.gz",
            "title": "Specify experiment table"
        },
        {
            "location": "/user_guide/experiment_table/#experiment-table",
            "text": "Learn how to translate any experiment design to  celseq2  in an easy way.",
            "title": "Experiment Table"
        },
        {
            "location": "/user_guide/experiment_table/#why-experiment-table",
            "text": "Experiment table has 3 purposes:   Specify the absolute paths of input CEL-Seq2 data.  Translate the overall design of experiments to format that  celseq2  can\n   understand, so that  celseq2  can generate the expected layout of UMI-count\n   matrix.  Provide an user-friendly way to finish the two above goals.   Experiment table is in particular convenient for complexed experiment design\n   where more than one experiment conditions with (or without)\n   biological/technical replicates present.",
            "title": "Why experiment table"
        },
        {
            "location": "/user_guide/experiment_table/#create-an-experiment-table-from-template",
            "text": "celseq2  provides a bash command  new-experiment-table  to initiate\na new experiment table.  new-experiment-table -o /path/to/wonderful_experiment_table.txt  It is space/tab separated text file. Modify it and fill in details.  SAMPLE_NAME CELL_BARCODES_INDEX R1  R2\nwonderful_experiment1   1,8,2-7 path/to/x-1-r1.fastq.gz path/to/x-1-r2.fastq.gz\nwonderful_experiment1   1-8 path/to/x-3-r1.fastq.gz path/to/x-3-r2.fastq.gz\nwonderful_experiment2   95-96,1-94,10   path/to/y-2-r1.fastq.gz path/to/y-2-r2.fastq.gz\nwonderful_experiment2   1-96    path/to/y-5-r1.fastq.gz path/to/y-5-r2.fastq.gz   Attention   Header names ( SAMPLE_NAME ,  CELL_BARCODES_INDEX ,  R1 ,  R2 ) are NOT\n  allowed to be modified or deleted.  Each slot cannot contain spaces.",
            "title": "Create an experiment table from template"
        },
        {
            "location": "/user_guide/experiment_table/#how-to-specify-experiment-table",
            "text": "User can get familiar with how to specify experiment table by walking through the\nfollowing three examples.   Hint  When specify each row of experiment table, keep a formula in mind:  For input reads file  X , claim that cells with barcode indexes from  i \nto  j  come from experiment  Y .",
            "title": "How to specify experiment table"
        },
        {
            "location": "/user_guide/experiment_table/#example-0",
            "text": "In Example-0, users will learn how to translate a experiment design to a\nexperiment table that  celseq2  can understand.    As shown in above diagram, this is how the experiment on wet lab side is\nperformed. There are two groups of cells from experiment-1 and experiment-2,\nwhich are colored by blue and orange, respectively. Experiment-1 (blue) has 8\ncells while experiment-2 (orange) has 96 cells.  User wants to quantify the two groups separately yet have them sequenced\ntogether. Here is a possible experiment design. First, during CEL-Seq2\nexperiment, the 8 cells of experiment-1 are labeled with cell barcodes indexed\nfrom 1 to 8 of cell barcodes  dictionary , while\nthe 96 cells of experiment-2 are labeled with barcodes indexed from 1 to 96.\nSecond, the two groups of cells are further labeled with different Illumina\nsequencing barcodes (denoted as blue and orange circles) and finally are\nsequenced in the same one lane (colored in green) of sequencer. As a result, user\nhas two sets of CEL-Seq2 FASTQ reads.  The goal of experiment table is make  celseq2  be aware of where to find the two\nsets of reads, and more importantly understand the entire experiment design, so\nthat  celseq2  finally generates two UMI-count matrix for the two experiments.  This is the example content of experiment table that user should prepare in this\ncase study.     SAMPLE_NAME  CELL_BARCODES_INDEX  R1  R2      experiment1   1-8  path/to/sampleX-lane2-R1.fastq.gz     path/to/sampleX-lane2-R2.fastq.gz       experiment2   1-96  path/to/sampleY-lane2-R1.fastq.gz     path/to/sampleY-lane2-R2.fastq.gz         Info  It is free to  claim  less or more cells in  CELL_BARCODES_INDEX  column.\nUsers do not have to claim the exact cells that are truly present in\nexperiment. For instance,  20-96 , instead of  1-96 , could be claimed in the\nabove experiment-2, if it were believed that cells  1-19  are not in good\nshape during cell preparation and should be ignored.    Info  celseq2  understands the most human ways to specify cell barcode index. For\nexample, all the following formats are equivalent to  1-8 :   8-1 : reversed range  1,2,3,4-8 : individual + range  8,1,7-2,3-6 : redundancy is tolerant",
            "title": "Example 0"
        },
        {
            "location": "/user_guide/experiment_table/#example-1",
            "text": "Example-1 is conceived on top of  Example-0 . Here users will know\nabout how  replicates  are specified to  celseq2 .  The experiment flow is same, except that the two groups are mixed together first\nand then get sequenced in three lanes instead of one lane. Therefore, user has\nsix sets of CEL-Seq2 FASTQ reads.    The example content of experiment table in this case study is:     SAMPLE_NAME  CELL_BARCODES_INDEX  R1  R2      experiment1   1,8,2-7  path/to/x-1-r1.fastq.gz   path/to/x-1-r2.fastq.gz     experiment1   8,7,6,5,4,3,2,1  path/to/x-2-r1.fastq.gz   path/to/x-2-r2.fastq.gz     experiment1   1-8  path/to/x-3-r1.fastq.gz   path/to/x-3-r2.fastq.gz     experiment2   1-96  path/to/y-1-r1.fastq.gz     path/to/y-2-r2.fastq.gz       experiment2   95-96,94-1,10  path/to/y-2-r1.fastq.gz     path/to/y-2-r2.fastq.gz       experiment2   1-96  path/to/y-3-r1.fastq.gz     path/to/y-3-r2.fastq.gz         Hint  The idea of \"lane\" in this case study could be adapted to any type of\nbiological / technical replicates.",
            "title": "Example 1"
        },
        {
            "location": "/user_guide/experiment_table/#example-2",
            "text": "Example-2 is closer to a real experiment with complexed design to handle possible\nbatch effect. However, user will still find it pretty easy to define the\nexperiment table.    User has two groups of cells named E1 and E2, respectively. E1 (squares) and E2\n(circles) are generated at two different conditions, and both have 96 cells. The\nultimate goal is to compare and find the possible gene expression differences in\nsingle-cell level between the two conditions, therefore batch effect should be\nalleviated as much as possible.  Here is a possible experiment design. First, only 48 cells of each condition are\nlocated in same one 96-well cell plate. This is to handle possible batch effect\nduring cell preparation. Second, 96 cells of each plate are labeled with cell\nbarcodes 1-96 as usual. Third, each plate has its own Illumina sequencing barcode\n(colored in yellow and green). This is similar to  Example-0 .\nFinally, all cells are mixed together and get sequenced in two lanes (colored in\npurple and black). This is similar to  Example-1 .  The experiment design gives user four sets of CEL-Seq2 reads.  Despite of the complexed flow, the example content of experiment table in this\ncase study is still as easy as:     SAMPLE_NAME  CELL_BARCODES_INDEX  R1  R2      E1   1-48  S1_L001_R1.fastq.gz     S1_L001_R2.fastq.gz       E2    49-96  S1_L001_R1.fastq.gz     S1_L001_R2.fastq.gz       E1   1-48  S1_L002_R1.fastq.gz     S1_L002_R2.fastq.gz       E2    49-96  S1_L002_R1.fastq.gz     S1_L002_R2.fastq.gz       E1   49-96  S2_L001_R1.fastq.gz     S2_L001_R2.fastq.gz       E2       1-48  S2_L001_R1.fastq.gz         S2_L001_R2.fastq.gz           E1   49-96  S2_L002_R1.fastq.gz     S2_L002_R2.fastq.gz       E2   1-48  S2_L002_R1.fastq.gz     S2_L002_R2.fastq.gz",
            "title": "Example 2"
        },
        {
            "location": "/user_guide/launch_pipeline/",
            "text": "Run pipeline\n\u00b6\n\n\nLearn about how it is easy to launch pipeline in all the ways users want.\n\n\n\n\nThe design of how to launch the pipeline reflects our philosophy about pipeline\nand the effort to realize superb user experience.\n\n\nDry-run\n\u00b6\n\n\nSet \n--dryrun\n flag to examine how many scheduled tasks to be performed before\nactually executing the pipeline. Here one task could be aligning one FASTQ file,\nor counting UMI from one SAM alignment file.\n\n\ncelseq2 --config-file /path/to/wonderful_CEL-Seq2_config.yaml \n\\\n\n    --experiment-table /path/to/wonderful_experiment_table.txt \n\\\n\n    --output-dir /path/to/result_dir \n\\\n\n    --dryrun\n\n\n\n\n\nLaunch pipeline to run parallel tasks\n\u00b6\n\n\nSet \n-j 10\n to launch pipeline with 10 tasks executed in parallel. This can run\non either the computing node or your own computer.\n\n\ncelseq2 --config-file /path/to/wonderful_CEL-Seq2_config.yaml \n\\\n\n    --experiment-table /path/to/wonderful_experiment_table.txt \n\\\n\n    --output-dir /path/to/result_dir \n\\\n\n    -j \n10\n\n\n\n\n\n\nSubmit tasks to server\n\u00b6\n\n\nAlternatively, it is straightforward to run the pipeline of \ncelseq2\n by\nsubmitting jobs to cluster, as \ncelseq2\n is built on top of\n\nsnakemake\n which is\na powerful workflow management framework.\n\n\nFor example, user could run the following command to submit jobs to computing\nnodes. Here it submits 10 jobs in parallel with 50G of memory requested by each.\n\n\ncelseq2 --config-file /path/to/wonderful_CEL-Seq2_config.yaml \n\\\n\n    --experiment-table /path/to/wonderful_experiment_table.txt \n\\\n\n    --output-dir /path/to/result_dir \n\\\n\n    -j \n10\n \n\\\n\n    --cluster \n\"qsub -cwd -j y -l h_vmem=50G\"\n \n&",
            "title": "Launch pipeline"
        },
        {
            "location": "/user_guide/launch_pipeline/#run-pipeline",
            "text": "Learn about how it is easy to launch pipeline in all the ways users want.   The design of how to launch the pipeline reflects our philosophy about pipeline\nand the effort to realize superb user experience.",
            "title": "Run pipeline"
        },
        {
            "location": "/user_guide/launch_pipeline/#dry-run",
            "text": "Set  --dryrun  flag to examine how many scheduled tasks to be performed before\nactually executing the pipeline. Here one task could be aligning one FASTQ file,\nor counting UMI from one SAM alignment file.  celseq2 --config-file /path/to/wonderful_CEL-Seq2_config.yaml  \\ \n    --experiment-table /path/to/wonderful_experiment_table.txt  \\ \n    --output-dir /path/to/result_dir  \\ \n    --dryrun",
            "title": "Dry-run"
        },
        {
            "location": "/user_guide/launch_pipeline/#launch-pipeline-to-run-parallel-tasks",
            "text": "Set  -j 10  to launch pipeline with 10 tasks executed in parallel. This can run\non either the computing node or your own computer.  celseq2 --config-file /path/to/wonderful_CEL-Seq2_config.yaml  \\ \n    --experiment-table /path/to/wonderful_experiment_table.txt  \\ \n    --output-dir /path/to/result_dir  \\ \n    -j  10",
            "title": "Launch pipeline to run parallel tasks"
        },
        {
            "location": "/user_guide/launch_pipeline/#submit-tasks-to-server",
            "text": "Alternatively, it is straightforward to run the pipeline of  celseq2  by\nsubmitting jobs to cluster, as  celseq2  is built on top of snakemake  which is\na powerful workflow management framework.  For example, user could run the following command to submit jobs to computing\nnodes. Here it submits 10 jobs in parallel with 50G of memory requested by each.  celseq2 --config-file /path/to/wonderful_CEL-Seq2_config.yaml  \\ \n    --experiment-table /path/to/wonderful_experiment_table.txt  \\ \n    --output-dir /path/to/result_dir  \\ \n    -j  10   \\ \n    --cluster  \"qsub -cwd -j y -l h_vmem=50G\"   &",
            "title": "Submit tasks to server"
        },
        {
            "location": "/user_guide/storage/",
            "text": "Storage Management\n\u00b6\n\n\nLearn how to reduce storage while maintaing the results.\n\n\n\n\nTo reduce the storage of project, it is suggested to get rid of intermediate\nfiles, in particular FASTQ and SAM files.\n\n\nRemove all FASTQ and SAM files generated by \ncelseq2\n.\n\n\ncelseq2 --config-file /path/to/wonderful_CEL-Seq2_config.yaml \\\n    --experiment-table /path/to/wonderful_experiment_table.txt \\\n    --output-dir /path/to/result_dir \\\n    -j 10 clean_FQ_SAM\n\n\n\n\n\nAlternatively, user can gzip FASTQ and convert SAM to BAM:\n\n\ncelseq2-slim --project-dir /path/to/result_dir --dryrun\ncelseq2-slim --project-dir /path/to/result_dir",
            "title": "Storage management"
        },
        {
            "location": "/user_guide/storage/#storage-management",
            "text": "Learn how to reduce storage while maintaing the results.   To reduce the storage of project, it is suggested to get rid of intermediate\nfiles, in particular FASTQ and SAM files.  Remove all FASTQ and SAM files generated by  celseq2 .  celseq2 --config-file /path/to/wonderful_CEL-Seq2_config.yaml \\\n    --experiment-table /path/to/wonderful_experiment_table.txt \\\n    --output-dir /path/to/result_dir \\\n    -j 10 clean_FQ_SAM  Alternatively, user can gzip FASTQ and convert SAM to BAM:  celseq2-slim --project-dir /path/to/result_dir --dryrun\ncelseq2-slim --project-dir /path/to/result_dir",
            "title": "Storage Management"
        },
        {
            "location": "/about/reproducibility/",
            "text": "Reproducibility\n\u00b6\n\n\nWe believe data digestion should be automated, and it should be done in a\nself-consistent manner \n.\n\n\n\n\nIntroduction\n\u00b6\n\n\ncelseq2\n is not the first tool developed by Yanai lab to process CEL-Seq2 data,\nbut \nCEL-Seq-pipeline\n (see \ncodes\n) is.\n\n\nHere we demonstrate \ncelseq2\n is not only able to reproduce results itself\ngenerated (\nself-consistency\n), but also remains consistent to\n\nCEL-Seq-pipeline\n (\ncross-consistency\n).\n\n\nSelf-consistency\n\u00b6\n\n\nSelf-consistency has the following two layers of meanings.\n\n\n\n\nGenerate the same UMI-count matrix with same \none\n set of CEL-Seq2 data\n   regardless of different runs of \ncelseq2\n.\n\n\nGenerate the same UMI-count matrix with same \nmultiple\n sets of CEL-Seq2 data\n   (e.g. biological / technical replicates) regardless of different runs of\n   \ncelseq2\n.\n\n\n\n\nExperiment design and data\n\u00b6\n\n\n\n\nAccordingly, the experiment table for \ncelseq2\n pipeline was defined as:\n\n\n\n\n\n\n\n\nSAMPLE_NAME\n\n\nCELL_BARCODES_INDEX\n\n\nR1\n\n\nR2\n\n\n\n\n\n\n\n\n\n\nE1\n\n\n1-3,6,4-5\n\n\nS1_L001_R1_001.fastq.gz\n\n\nS1_L001_R2_001.fastq.gz\n\n\n\n\n\n\nE1\n\n\n7,8,9\n\n\nS1_L002_R1_001.fastq.gz\n\n\nS1_L002_R2_001.fastq.gz\n\n\n\n\n\n\nE1\n\n\n10\n\n\nS1_L003_R1_001.fastq.gz\n\n\nS1_L003_R2_001.fastq.gz\n\n\n\n\n\n\nE2\n\n\n1-96\n\n\nS2_L001_R1_001.fastq.gz\n\n\nS2_L001_R2_001.fastq.gz\n\n\n\n\n\n\nE2\n\n\n1-13\n\n\nS2_L002_R1_001.fastq.gz\n\n\nS2_L002_R2_001.fastq.gz\n\n\n\n\n\n\n\n\n In order to create the above arbitrary experiment with complexed\n    design, the actual raw data, which was one set of CEL-Seq2 data (40 million\n    pairs of reads), was duplicated to 5 pairs. In other words, all the reads\n    listed in \nR1\n column were same, so was same in the \nR2\n list.\n\n\nHow to validate self-consistency\n\u00b6\n\n\nUMI count matrices were generated in \nexpr\n.\n\n\nexpr/\n\u251c\u2500\u2500 E1                  # <== cell No. 1-10\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.h5\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 item-1          # <== cell No. 1-6\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 item-2          # <== cell No. 7-9\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 item-3          # <== cell No. 10\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 expr.csv\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 expr.h5\n\u2514\u2500\u2500 E2                  # <== cell No. 1-96\n    \u251c\u2500\u2500 expr.csv\n    \u251c\u2500\u2500 expr.h5\n    \u251c\u2500\u2500 item-4          # <== cell No. 1-96\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n    \u2514\u2500\u2500 item-5          # <== cell No. 1-13\n        \u251c\u2500\u2500 expr.csv\n        \u2514\u2500\u2500 expr.h5\n\n\n\n\n\nBy examining the following comparisons, self-consistency was proved.\n\n\n  E2-item5 v.s. E2-item4 on cells 1-13 only:\nif they were same, self-consistency with \none\n pair of read files would\nbe proved.\n\n\n  E1 v.s. E2 on cells 1-10 only:\nif they were same, self-consistency with \nmultiple\n pairs of read files would\nbe proved.\n\n\nSelf-consistency was validated\n\u00b6\n\n\n Test script\n\nmanual_test_expr_consistency.R\n\nquantified the difference among the intact matrices. It ended up as zero which\nled to validation of self-consistency.\n\n\nFurthermore, the heatmap on UMI count matrices where 200 randomly selected genes\nwere rows and cells were columns would greatly help visualize the consistency.\n\n\n Self-consistency with one CEL-Seq2 data\n\u00b6\n\n\n\n\nComparison E2-item5 v.s. E2-item4, focusing on cells 1-13,\ndemonstrated self-\nconsistency when one set of CEL-Seq2 data was input. Rows were 200 randomly\nselected genes, and columns were all available cells. Left panel is cells 1-13 in\nE2-item5, middle panel is cells 1-13 in E2-item4, and right panel is rest of\ncells in E2-item4.\n\n\n Self-consistency with multiple CEL-Seq2 data\n\u00b6\n\n\n\n\nComparison E1 v.s. E2, focusing on cells 1-10, demonstrated\nself-consistency when\none set of CEL-Seq2 data was input. Rows were 200 randomly selected genes, and\ncolumns were all available cells. Left panel is cells 1-10 in E1, middle panel is\ncells 1-10 in E2, and right panel is rest of cells in E2.\n\n\n\n\nCross-consistency\n\u00b6\n\n\nCross-consistency has the following two layers of meanings:\n\n\n\n\ncelseq2\n and \nCEL-Seq-pipeline\n generate same UMI-count matrix with same\n\none\n set of CEL-Seq2 data.\n\n\ncelseq2\n and \nCEL-Seq-pipeline\n generate same UMI-count matrix with same\n\nmultiple\n sets of CEL-Seq2 data.\n\n\n\n\nExperiment design and data\n\u00b6\n\n\n\n\n\n\n\n\n\n\nSAMPLE_NAME\n\n\nCELL_BARCODES_INDEX\n\n\nR1\n\n\nR2\n\n\n\n\n\n\n\n\n\n\nE2\n\n\n1-96\n\n\nS_L001_R1_001.fastq.gz\n\n\nS_L001_R2_001.fastq.gz\n\n\n\n\n\n\nE2\n\n\n1-13\n\n\nS_L002_R1_001.fastq.gz\n\n\nS_L002_R2_001.fastq.gz\n\n\n\n\n\n\n\n\n In order to create the above arbitrary experiment, the actual raw\n    data, which was one set of CEL-Seq2 data (40 million pairs of reads), was\n    duplicated to 2 pairs. In other words, all the reads listed in \nR1\n column\n    were same, so was same in the \nR2\n list.\n\n\nIn this very example, the UMI-count matrix of entire E would be expected to be\nsame as the one of E2_item1 alone.\n\n\nHow to validate cross-consistency\n\u00b6\n\n\nUMI count matrices were generated in \nexpr\n.\n\n\nexpr/\n\u2514\u2500\u2500 E2                      # <== cell No. 1-96\n    \u251c\u2500\u2500 expr.csv\n    \u251c\u2500\u2500 expr.h5\n    \u251c\u2500\u2500 item-1              # <== cell No. 1-96\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n    \u2514\u2500\u2500 item-2              # <== cell No. 1-13\n        \u251c\u2500\u2500 expr.csv\n        \u2514\u2500\u2500 expr.h5\n\n\n\n\n\nBy examining the following comparisons, cross-consistency was proved.\n\n\n \ncelseq2\n v.s. \nCEL-Seq-pipeline\n with E2_item1 as input. If they were\nsame, cross-consistency with one CEL-Seq2 data would be proved.\n\n\n \ncelseq2\n with entire E2 as input v.s. \nCEL-Seq2-pipeline\n with E2_item1\nas input. If they were\nsame, cross-consistency with multiple CEL-Seq2 data would be proved.\n\n\nCross-consistency was validated\n\u00b6\n\n\n As also shown in self-consistency post, manual test script\n\nmanual_test_expr_consistency.R\n\nquantified the difference among the intact UMI-count matrices. It ended\nup as zero which led to validation of cross-consistency.\n\n\nFurthermore, the heatmap on subset of the UMI count matrices where 200 randomly\nselected genes were rows and cells were columns would help visualize the cross-\nconsistency.\n\n\n Cross-consistency with one CEL-Seq2 data\n\u00b6\n\n\n\n\nExecuted \ncelseq2\n v.s. \nCEL-Seq-pipeline\n on same E2-item1 data\nwhich covered 96 cells. Left and right panel was the UMI count matrix generated by\n\ncelseq2\n and \nCEL-Seq-pipeline\n, respectively. 200 genes were\nrandomly selected as rows for visualization and all cells were placed on\ncolumns.\n\n\n Cross-consistency with multiple CEL-Seq2 data\n\u00b6\n\n\n\n\ncelseq2\n was executed  on full E2 v.s. \nCEL-Seq-pipeline\n was performed on\nE2_item1 alone. Left and right panel was \ncelseq2\n and \nCEL-Seq-pipeline\n,\nrespectively. 200 genes were randomly selected as rows for visualization and all\ncells were placed on columns.",
            "title": "Reproducibility"
        },
        {
            "location": "/about/reproducibility/#reproducibility",
            "text": "We believe data digestion should be automated, and it should be done in a\nself-consistent manner  .",
            "title": "Reproducibility"
        },
        {
            "location": "/about/reproducibility/#introduction",
            "text": "celseq2  is not the first tool developed by Yanai lab to process CEL-Seq2 data,\nbut  CEL-Seq-pipeline  (see  codes ) is.  Here we demonstrate  celseq2  is not only able to reproduce results itself\ngenerated ( self-consistency ), but also remains consistent to CEL-Seq-pipeline  ( cross-consistency ).",
            "title": "Introduction"
        },
        {
            "location": "/about/reproducibility/#self-consistency",
            "text": "Self-consistency has the following two layers of meanings.   Generate the same UMI-count matrix with same  one  set of CEL-Seq2 data\n   regardless of different runs of  celseq2 .  Generate the same UMI-count matrix with same  multiple  sets of CEL-Seq2 data\n   (e.g. biological / technical replicates) regardless of different runs of\n    celseq2 .",
            "title": "Self-consistency"
        },
        {
            "location": "/about/reproducibility/#experiment-design-and-data",
            "text": "Accordingly, the experiment table for  celseq2  pipeline was defined as:     SAMPLE_NAME  CELL_BARCODES_INDEX  R1  R2      E1  1-3,6,4-5  S1_L001_R1_001.fastq.gz  S1_L001_R2_001.fastq.gz    E1  7,8,9  S1_L002_R1_001.fastq.gz  S1_L002_R2_001.fastq.gz    E1  10  S1_L003_R1_001.fastq.gz  S1_L003_R2_001.fastq.gz    E2  1-96  S2_L001_R1_001.fastq.gz  S2_L001_R2_001.fastq.gz    E2  1-13  S2_L002_R1_001.fastq.gz  S2_L002_R2_001.fastq.gz      In order to create the above arbitrary experiment with complexed\n    design, the actual raw data, which was one set of CEL-Seq2 data (40 million\n    pairs of reads), was duplicated to 5 pairs. In other words, all the reads\n    listed in  R1  column were same, so was same in the  R2  list.",
            "title": "Experiment design and data"
        },
        {
            "location": "/about/reproducibility/#how-to-validate-self-consistency",
            "text": "UMI count matrices were generated in  expr .  expr/\n\u251c\u2500\u2500 E1                  # <== cell No. 1-10\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.h5\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 item-1          # <== cell No. 1-6\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 item-2          # <== cell No. 7-9\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 item-3          # <== cell No. 10\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 expr.csv\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 expr.h5\n\u2514\u2500\u2500 E2                  # <== cell No. 1-96\n    \u251c\u2500\u2500 expr.csv\n    \u251c\u2500\u2500 expr.h5\n    \u251c\u2500\u2500 item-4          # <== cell No. 1-96\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n    \u2514\u2500\u2500 item-5          # <== cell No. 1-13\n        \u251c\u2500\u2500 expr.csv\n        \u2514\u2500\u2500 expr.h5  By examining the following comparisons, self-consistency was proved.    E2-item5 v.s. E2-item4 on cells 1-13 only:\nif they were same, self-consistency with  one  pair of read files would\nbe proved.    E1 v.s. E2 on cells 1-10 only:\nif they were same, self-consistency with  multiple  pairs of read files would\nbe proved.",
            "title": "How to validate self-consistency"
        },
        {
            "location": "/about/reproducibility/#self-consistency-was-validated",
            "text": "Test script manual_test_expr_consistency.R \nquantified the difference among the intact matrices. It ended up as zero which\nled to validation of self-consistency.  Furthermore, the heatmap on UMI count matrices where 200 randomly selected genes\nwere rows and cells were columns would greatly help visualize the consistency.",
            "title": "Self-consistency was validated"
        },
        {
            "location": "/about/reproducibility/#self-consistency-with-one-cel-seq2-data",
            "text": "Comparison E2-item5 v.s. E2-item4, focusing on cells 1-13,\ndemonstrated self-\nconsistency when one set of CEL-Seq2 data was input. Rows were 200 randomly\nselected genes, and columns were all available cells. Left panel is cells 1-13 in\nE2-item5, middle panel is cells 1-13 in E2-item4, and right panel is rest of\ncells in E2-item4.",
            "title": "Self-consistency with one CEL-Seq2 data"
        },
        {
            "location": "/about/reproducibility/#self-consistency-with-multiple-cel-seq2-data",
            "text": "Comparison E1 v.s. E2, focusing on cells 1-10, demonstrated\nself-consistency when\none set of CEL-Seq2 data was input. Rows were 200 randomly selected genes, and\ncolumns were all available cells. Left panel is cells 1-10 in E1, middle panel is\ncells 1-10 in E2, and right panel is rest of cells in E2.",
            "title": "Self-consistency with multiple CEL-Seq2 data"
        },
        {
            "location": "/about/reproducibility/#cross-consistency",
            "text": "Cross-consistency has the following two layers of meanings:   celseq2  and  CEL-Seq-pipeline  generate same UMI-count matrix with same one  set of CEL-Seq2 data.  celseq2  and  CEL-Seq-pipeline  generate same UMI-count matrix with same multiple  sets of CEL-Seq2 data.",
            "title": "Cross-consistency"
        },
        {
            "location": "/about/reproducibility/#experiment-design-and-data_1",
            "text": "SAMPLE_NAME  CELL_BARCODES_INDEX  R1  R2      E2  1-96  S_L001_R1_001.fastq.gz  S_L001_R2_001.fastq.gz    E2  1-13  S_L002_R1_001.fastq.gz  S_L002_R2_001.fastq.gz      In order to create the above arbitrary experiment, the actual raw\n    data, which was one set of CEL-Seq2 data (40 million pairs of reads), was\n    duplicated to 2 pairs. In other words, all the reads listed in  R1  column\n    were same, so was same in the  R2  list.  In this very example, the UMI-count matrix of entire E would be expected to be\nsame as the one of E2_item1 alone.",
            "title": "Experiment design and data"
        },
        {
            "location": "/about/reproducibility/#how-to-validate-cross-consistency",
            "text": "UMI count matrices were generated in  expr .  expr/\n\u2514\u2500\u2500 E2                      # <== cell No. 1-96\n    \u251c\u2500\u2500 expr.csv\n    \u251c\u2500\u2500 expr.h5\n    \u251c\u2500\u2500 item-1              # <== cell No. 1-96\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 expr.csv\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 expr.h5\n    \u2514\u2500\u2500 item-2              # <== cell No. 1-13\n        \u251c\u2500\u2500 expr.csv\n        \u2514\u2500\u2500 expr.h5  By examining the following comparisons, cross-consistency was proved.    celseq2  v.s.  CEL-Seq-pipeline  with E2_item1 as input. If they were\nsame, cross-consistency with one CEL-Seq2 data would be proved.    celseq2  with entire E2 as input v.s.  CEL-Seq2-pipeline  with E2_item1\nas input. If they were\nsame, cross-consistency with multiple CEL-Seq2 data would be proved.",
            "title": "How to validate cross-consistency"
        },
        {
            "location": "/about/reproducibility/#cross-consistency-was-validated",
            "text": "As also shown in self-consistency post, manual test script manual_test_expr_consistency.R \nquantified the difference among the intact UMI-count matrices. It ended\nup as zero which led to validation of cross-consistency.  Furthermore, the heatmap on subset of the UMI count matrices where 200 randomly\nselected genes were rows and cells were columns would help visualize the cross-\nconsistency.",
            "title": "Cross-consistency was validated"
        },
        {
            "location": "/about/reproducibility/#cross-consistency-with-one-cel-seq2-data",
            "text": "Executed  celseq2  v.s.  CEL-Seq-pipeline  on same E2-item1 data\nwhich covered 96 cells. Left and right panel was the UMI count matrix generated by celseq2  and  CEL-Seq-pipeline , respectively. 200 genes were\nrandomly selected as rows for visualization and all cells were placed on\ncolumns.",
            "title": "Cross-consistency with one CEL-Seq2 data"
        },
        {
            "location": "/about/reproducibility/#cross-consistency-with-multiple-cel-seq2-data",
            "text": "celseq2  was executed  on full E2 v.s.  CEL-Seq-pipeline  was performed on\nE2_item1 alone. Left and right panel was  celseq2  and  CEL-Seq-pipeline ,\nrespectively. 200 genes were randomly selected as rows for visualization and all\ncells were placed on columns.",
            "title": "Cross-consistency with multiple CEL-Seq2 data"
        },
        {
            "location": "/about/user_friendly/",
            "text": "User Experience\n\u00b6\n\n\nWe believe data digestion should be automated, and it should be done in an\nuser-friendly manner \n.\n\n\n\n\nEasy to setup\n\u00b6\n\n\nIn addition to installation, the setup of bioinformatics pipeline is another stop\nthat every user has to endure before launching the beautiful data analysis\njourney. In context of processing CEL-Seq2 data, the setup means\ntelling pipeline where to find the aligner index files to align reads, where to\nfind the genome annotation for quantification, and what is the length of UMI or\ncell barcodes, etc. These are required information to perform data digestion.\n\n\nInstead of having users specify them over and over again when launching pipeline,\nwe aimed to bring an user experience where the setup needs done for once and\nonce only. This is the motivation behind configuration file, and we believe it\nshould be reusable for fixed type of species.\n\n\nSee \n\"Configuration\"\n for details.\n\n\nIn addition, here is an utility tool named\n\nMrY\n. It aimed to download and manage all the\ngenome FASTA files, annotations (GTF/GFF) and furthermore create aligner index\n(Bowtie2 and STAR) in a painless way.\n\n\nEasy to handle complexed experiment\n\u00b6\n\n\nWe aimed to design an intuitive way for users to specify the experiments\ndespite of its complexed layout.\n\n\nA space/tab separated file called \"Experiment table\" is our solution. Each row\nspecifies a set of CEL-Seq2 data. Filling blanks of each row by following a\nsimple rule stated as below:\n\n\n\n\nFor input reads file \nX\n, claim that cells with barcode indexes from \ni\n to \nj\n\ncome from experiment \nY\n.\n\n\n\n\nTake the experiment in \n\"Quick Start\"\n for example,\n\nCEL-Seq-pipeline\n required a \n\"sample\nsheet\"\n\nwith 36 lines to define the  experiment layout.\n\n\n\n\n\n\n\n\n#id\n\n\nflocell\n\n\nseries\n\n\nlane\n\n\nil_barcode\n\n\ncel_barcode\n\n\nproject\n\n\n\n\n\n\n\n\n\n\n1\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n1\n\n\nCE_1_1\n\n\n\n\n\n\n2\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n2\n\n\nCE_1_2\n\n\n\n\n\n\n3\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n3\n\n\nCE_1_3\n\n\n\n\n\n\n4\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n4\n\n\nCE_1_4\n\n\n\n\n\n\n5\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n5\n\n\nCE_1_5\n\n\n\n\n\n\n6\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n6\n\n\nCE_1_6\n\n\n\n\n\n\n7\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n7\n\n\nCE_1_7\n\n\n\n\n\n\n8\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n8\n\n\nCE_1_8\n\n\n\n\n\n\n9\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n9\n\n\nCE_1_9\n\n\n\n\n\n\n1\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n1\n\n\nCE_1_1\n\n\n\n\n\n\n2\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n2\n\n\nCE_1_2\n\n\n\n\n\n\n3\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n3\n\n\nCE_1_3\n\n\n\n\n\n\n4\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n4\n\n\nCE_1_4\n\n\n\n\n\n\n5\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n5\n\n\nCE_1_5\n\n\n\n\n\n\n6\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n6\n\n\nCE_1_6\n\n\n\n\n\n\n7\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n7\n\n\nCE_1_7\n\n\n\n\n\n\n8\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n8\n\n\nCE_1_8\n\n\n\n\n\n\n9\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n9\n\n\nCE_1_9\n\n\n\n\n\n\n10\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n10\n\n\nCE_2_1\n\n\n\n\n\n\n11\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n11\n\n\nCE_2_2\n\n\n\n\n\n\n12\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n12\n\n\nCE_2_3\n\n\n\n\n\n\n13\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n13\n\n\nCE_2_4\n\n\n\n\n\n\n14\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n14\n\n\nCE_2_5\n\n\n\n\n\n\n15\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n15\n\n\nCE_2_6\n\n\n\n\n\n\n16\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n16\n\n\nCE_2_7\n\n\n\n\n\n\n17\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n17\n\n\nCE_2_8\n\n\n\n\n\n\n18\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL005\n\n\n4\n\n\n18\n\n\nCE_2_9\n\n\n\n\n\n\n10\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n10\n\n\nCE_2_1\n\n\n\n\n\n\n11\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n11\n\n\nCE_2_2\n\n\n\n\n\n\n12\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n12\n\n\nCE_2_3\n\n\n\n\n\n\n13\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n13\n\n\nCE_2_4\n\n\n\n\n\n\n14\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n14\n\n\nCE_2_5\n\n\n\n\n\n\n15\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n15\n\n\nCE_2_6\n\n\n\n\n\n\n16\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n16\n\n\nCE_2_7\n\n\n\n\n\n\n17\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n17\n\n\nCE_2_8\n\n\n\n\n\n\n18\n\n\nC5BW1ACXX\n\n\nCE_TC\n\n\nL008\n\n\n4\n\n\n18\n\n\nCE_2_9\n\n\n\n\n\n\n\n\nOn the contrary, user will find it only takes \ncelseq2\n 4 lines to do the same,\nand done in much more intuitive manner.\n\n\n\n\n\n\n\n\nSAMPLE_NAME\n\n\nCELL_BARCODES_INDEX\n\n\nR1\n\n\nR2\n\n\n\n\n\n\n\n\n\n\nCE_1\n\n\n1-9\n\n\npath/to/lane5-R1.fastq.gz\n\n\npath/to/lane5-R2.fastq.gz\n\n\n\n\n\n\nCE_2\n\n\n10-18\n\n\npath/to/lane5-R1.fastq.gz\n\n\npath/to/lane5-R2.fastq.gz\n\n\n\n\n\n\nCE_1\n\n\n1-9\n\n\npath/to/lane8-R1.fastq.gz\n\n\npath/to/lane8-R2.fastq.gz\n\n\n\n\n\n\nCE_2\n\n\n10-18\n\n\npath/to/lane8-R1.fastq.gz\n\n\npath/to/lane8-R2.fastq.gz\n\n\n\n\n\n\n\n\nSee \n\"Specify Experiment Table\"\n for more\ninstructions.\n\n\nEasy to request resources\n\u00b6\n\n\nIt is straightforward to run the pipeline of \ncelseq2\n by submitting jobs to\ncluster, as \ncelseq2\n is built on top of \nsnakemake\n which is a powerful workflow\nmanagement framework.\n\n\nFor example, user could run the following command to submit jobs to computing\nnodes. Here it submits 10 jobs in parallel with 50G of memory requested by each.\n\n\ncelseq2 --config-file /path/to/wonderful_CEL-Seq2_config.yaml \n\\\n\n    --experiment-table /path/to/wonderful_experiment_table.txt \n\\\n\n    --output-dir /path/to/result_dir \n\\\n\n    -j \n10\n \n\\\n\n    --cluster \n\"qsub -cwd -j y -l h_vmem=50G\"\n \n&",
            "title": "User experience"
        },
        {
            "location": "/about/user_friendly/#user-experience",
            "text": "We believe data digestion should be automated, and it should be done in an\nuser-friendly manner  .",
            "title": "User Experience"
        },
        {
            "location": "/about/user_friendly/#easy-to-setup",
            "text": "In addition to installation, the setup of bioinformatics pipeline is another stop\nthat every user has to endure before launching the beautiful data analysis\njourney. In context of processing CEL-Seq2 data, the setup means\ntelling pipeline where to find the aligner index files to align reads, where to\nfind the genome annotation for quantification, and what is the length of UMI or\ncell barcodes, etc. These are required information to perform data digestion.  Instead of having users specify them over and over again when launching pipeline,\nwe aimed to bring an user experience where the setup needs done for once and\nonce only. This is the motivation behind configuration file, and we believe it\nshould be reusable for fixed type of species.  See  \"Configuration\"  for details.  In addition, here is an utility tool named MrY . It aimed to download and manage all the\ngenome FASTA files, annotations (GTF/GFF) and furthermore create aligner index\n(Bowtie2 and STAR) in a painless way.",
            "title": "Easy to setup"
        },
        {
            "location": "/about/user_friendly/#easy-to-handle-complexed-experiment",
            "text": "We aimed to design an intuitive way for users to specify the experiments\ndespite of its complexed layout.  A space/tab separated file called \"Experiment table\" is our solution. Each row\nspecifies a set of CEL-Seq2 data. Filling blanks of each row by following a\nsimple rule stated as below:   For input reads file  X , claim that cells with barcode indexes from  i  to  j \ncome from experiment  Y .   Take the experiment in  \"Quick Start\"  for example, CEL-Seq-pipeline  required a  \"sample\nsheet\" \nwith 36 lines to define the  experiment layout.     #id  flocell  series  lane  il_barcode  cel_barcode  project      1  C5BW1ACXX  CE_TC  L005  4  1  CE_1_1    2  C5BW1ACXX  CE_TC  L005  4  2  CE_1_2    3  C5BW1ACXX  CE_TC  L005  4  3  CE_1_3    4  C5BW1ACXX  CE_TC  L005  4  4  CE_1_4    5  C5BW1ACXX  CE_TC  L005  4  5  CE_1_5    6  C5BW1ACXX  CE_TC  L005  4  6  CE_1_6    7  C5BW1ACXX  CE_TC  L005  4  7  CE_1_7    8  C5BW1ACXX  CE_TC  L005  4  8  CE_1_8    9  C5BW1ACXX  CE_TC  L005  4  9  CE_1_9    1  C5BW1ACXX  CE_TC  L008  4  1  CE_1_1    2  C5BW1ACXX  CE_TC  L008  4  2  CE_1_2    3  C5BW1ACXX  CE_TC  L008  4  3  CE_1_3    4  C5BW1ACXX  CE_TC  L008  4  4  CE_1_4    5  C5BW1ACXX  CE_TC  L008  4  5  CE_1_5    6  C5BW1ACXX  CE_TC  L008  4  6  CE_1_6    7  C5BW1ACXX  CE_TC  L008  4  7  CE_1_7    8  C5BW1ACXX  CE_TC  L008  4  8  CE_1_8    9  C5BW1ACXX  CE_TC  L008  4  9  CE_1_9    10  C5BW1ACXX  CE_TC  L005  4  10  CE_2_1    11  C5BW1ACXX  CE_TC  L005  4  11  CE_2_2    12  C5BW1ACXX  CE_TC  L005  4  12  CE_2_3    13  C5BW1ACXX  CE_TC  L005  4  13  CE_2_4    14  C5BW1ACXX  CE_TC  L005  4  14  CE_2_5    15  C5BW1ACXX  CE_TC  L005  4  15  CE_2_6    16  C5BW1ACXX  CE_TC  L005  4  16  CE_2_7    17  C5BW1ACXX  CE_TC  L005  4  17  CE_2_8    18  C5BW1ACXX  CE_TC  L005  4  18  CE_2_9    10  C5BW1ACXX  CE_TC  L008  4  10  CE_2_1    11  C5BW1ACXX  CE_TC  L008  4  11  CE_2_2    12  C5BW1ACXX  CE_TC  L008  4  12  CE_2_3    13  C5BW1ACXX  CE_TC  L008  4  13  CE_2_4    14  C5BW1ACXX  CE_TC  L008  4  14  CE_2_5    15  C5BW1ACXX  CE_TC  L008  4  15  CE_2_6    16  C5BW1ACXX  CE_TC  L008  4  16  CE_2_7    17  C5BW1ACXX  CE_TC  L008  4  17  CE_2_8    18  C5BW1ACXX  CE_TC  L008  4  18  CE_2_9     On the contrary, user will find it only takes  celseq2  4 lines to do the same,\nand done in much more intuitive manner.     SAMPLE_NAME  CELL_BARCODES_INDEX  R1  R2      CE_1  1-9  path/to/lane5-R1.fastq.gz  path/to/lane5-R2.fastq.gz    CE_2  10-18  path/to/lane5-R1.fastq.gz  path/to/lane5-R2.fastq.gz    CE_1  1-9  path/to/lane8-R1.fastq.gz  path/to/lane8-R2.fastq.gz    CE_2  10-18  path/to/lane8-R1.fastq.gz  path/to/lane8-R2.fastq.gz     See  \"Specify Experiment Table\"  for more\ninstructions.",
            "title": "Easy to handle complexed experiment"
        },
        {
            "location": "/about/user_friendly/#easy-to-request-resources",
            "text": "It is straightforward to run the pipeline of  celseq2  by submitting jobs to\ncluster, as  celseq2  is built on top of  snakemake  which is a powerful workflow\nmanagement framework.  For example, user could run the following command to submit jobs to computing\nnodes. Here it submits 10 jobs in parallel with 50G of memory requested by each.  celseq2 --config-file /path/to/wonderful_CEL-Seq2_config.yaml  \\ \n    --experiment-table /path/to/wonderful_experiment_table.txt  \\ \n    --output-dir /path/to/result_dir  \\ \n    -j  10   \\ \n    --cluster  \"qsub -cwd -j y -l h_vmem=50G\"   &",
            "title": "Easy to request resources"
        },
        {
            "location": "/about/performance/",
            "text": "Performance\n\u00b6\n\n\nWe believe data digestion should be automated, and it should be done in a\nvery, very computational efficient manner \n.\n\n\n\n\nIntroduction\n\u00b6\n\n\nAs the first generation, \nCEL-Seq-pipeline\n provided a stable and efficient\nservice to process CEL-Seq and CEL-Seq2 data. Improving computational\nefficiency even on top of that was challenging to ourselves. However, we spared\nnot effort to challenge the status quo.\n\n\nGenerally speaking, there are two different ways to improve the runtime of a\npipeline:\n\n\n\n\n Provide more computational resources (e.g., CPU cores or nodes in\na cluster) thus allow more parallelized tasks running in the same time.\n\n\n Optimize the codes of each pipeline step in order to make it more\n   computationally efficient.\n\n\n\n\ncelseq2\n features in a new design of work flow with optimized codes written in\nPython 3 which leads to boosted computational efficiency, and furthermore brings\nflexibility to request computational resources from either local computer or\nservers.\n\n\nHow to compare\n\u00b6\n\n\nHere were two comparisons.\n\n\n\n\nIn order to demonstrate the efficiency boosted by the optimized codes alone,\n\ncelseq2\n and \nCEL-Seq-pipeline\n ran on the same \none\n set of CEL-Seq2 data in\n\nserial\n mode.\n\n\nIn order to quantify the difference of performance in real case where\nparallelization is often allowed, \ncelseq2\n and \nCEL-Seq-pipeline\n ran on same\n\ntwo\n sets of CEL-Seq2 data in \nparallel\n mode.\n\n\n\n\nThe example one set of CEL-Seq2 data consisted of ~40 million read pairs.\n\n\nComparison of runtimes in serial mode\n\u00b6\n\n\n\n\nEach run in \nserial\n mode was performed three times independently to account for\nthe fluctuation of run-time.\n\n\n\n\n\n\n\n Each step of the work flow was accelerated by \ncelseq2\n,\ncompared to \nCEL-Seq-pipeline\n, solely due to the new design with code\noptimization.\n\n\n\n\nDemultiplexing reached \n3-fold\n speed.\n\n\nCounting UMIs reached  \n4-fold\n speed.\n\n\nOverall reached \n2-fold\n speed.\n\n\n\n\n In this comparison \nCEL-Seq-pipeline\n had an unfair advantage because\n    it internally used 15 threads for parallelizing alignment with \nbowtie2\n ,\n    while the new pipeline stringently used only one thread. Therefore, \ncelseq2\n\n    spent more time than \nCEL-Seq-pipeline\n in this example.\n\n\n Nevertheless, \ncelseq2\n achieved an overall speed of more than\n\n2-fold\n compared to \nCEL-Seq-pipeline\n.\n\n\nComparison of runtimes in parallel mode\n\u00b6\n\n\n\n\nIn practice, users usually have multiple CPU or cores available, and\npipelines can take advantage of this fact by splitting up data into smaller\nchunks and processing them in parallel, and/or by running individual processes\n(e.g., alignment) using multiple threads.\n\n\nHere the second comparison aimed to quantify the performance of the two pipelines\nin a more realistic scenario by running them on a 32-core server in \nparallel\n\nmode \n1\n, and testing them on a dataset that consisted of two sets\nof CEL-Seq2 data \n2\n which totally consisted ~80 million read pairs.\n\n\n\n\n\n\n\n Each step of the work flow was accelerated by \ncelseq2\n,\ncompared to \nCEL-Seq-pipeline\n.\n\n\n\n\nDemultiplexing reached \n9-fold\n speed.\n\n\nCounting UMIs reached  \n4-fold\n speed \n3\n.\n\n\nOverall reached \n3.5-fold\n speed.\n\n\n\n\n In this comparison \nCEL-Seq-pipeline\n again had an unfair advantage,\n    because the computational resources was as twice as what \ncelseq2\n used for\n    UMI counting. Internally \nCEL-Seq-pipeline\n launched a fixed number parallel\n    jobs which was 50, instead of 30 \n3\n.\n\n\n Nevertheless, \ncelseq2\n achieved a more than \n3.5-fold\n\n    speed compared to \nCEL-Seq-pipeline\n. In particular, the new design of work\n    flow of \ncelseq2\n parallelized the demultiplexing step.\n\n\nSummary\n\u00b6\n\n\n\n\nCompared to \nCEL-Seq-pipeline\n, \ncelseq2\n achieved the following speed:\n\n\nDemultiplexing: ~4N-fold, where N is the number of sets of CEL-Seq2 data.\n\n\nAlignment: roughly same as expected since no optimization was involved.\n\n\nCounting UMIs: ~4-fold.\n\n\n\n\n\n\nIn real case, the absolute runtime that took\ncelseq2\n to finish ~80 million\nread pairs was about 40 minutes \n4\n in this example.\n\n\n\n\n\n\n\n\n\n\n\n\nThe syntax to run pipelines in parallel mode was\ndifferent. \nCEL-Seq-pipeline\n set \nproc=30\n in its configuration file. And\n\ncelseq2\n requested 30 cores at most simply by setting \n-j 30\n.\u00a0\n\u21a9\n\n\n\n\n\n\nFor the record, the two sets CEL-Seq2 data were indeed two copies\n of the same one set of data.\u00a0\n\u21a9\n\n\n\n\n\n\nIt turned out that \nproc\n parameter of \nCEL-Seq-pipeline\n was not used\nwhen counting UMIs, but instead internally \nCEL-Seq-pipeline\n launched a fixed\nnumber parallel jobs which was always 50. See\n\nline-60\n and\n\nline-81\n in\nsource code. In this example, they were supposed to request same 30 cores so\n\nCEL-Seq-pipeline\n had roughly twice number of jobs running for counting\nUMIs compared to \ncelseq2\n.\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nThe absolute time varies among data sets. For example, it will\ntake less time if less proportional reads were qualified though same total number\nof read pairs (e.g., 40 million).\u00a0\n\u21a9",
            "title": "Performance"
        },
        {
            "location": "/about/performance/#performance",
            "text": "We believe data digestion should be automated, and it should be done in a\nvery, very computational efficient manner  .",
            "title": "Performance"
        },
        {
            "location": "/about/performance/#introduction",
            "text": "As the first generation,  CEL-Seq-pipeline  provided a stable and efficient\nservice to process CEL-Seq and CEL-Seq2 data. Improving computational\nefficiency even on top of that was challenging to ourselves. However, we spared\nnot effort to challenge the status quo.  Generally speaking, there are two different ways to improve the runtime of a\npipeline:    Provide more computational resources (e.g., CPU cores or nodes in\na cluster) thus allow more parallelized tasks running in the same time.   Optimize the codes of each pipeline step in order to make it more\n   computationally efficient.   celseq2  features in a new design of work flow with optimized codes written in\nPython 3 which leads to boosted computational efficiency, and furthermore brings\nflexibility to request computational resources from either local computer or\nservers.",
            "title": "Introduction"
        },
        {
            "location": "/about/performance/#how-to-compare",
            "text": "Here were two comparisons.   In order to demonstrate the efficiency boosted by the optimized codes alone, celseq2  and  CEL-Seq-pipeline  ran on the same  one  set of CEL-Seq2 data in serial  mode.  In order to quantify the difference of performance in real case where\nparallelization is often allowed,  celseq2  and  CEL-Seq-pipeline  ran on same two  sets of CEL-Seq2 data in  parallel  mode.   The example one set of CEL-Seq2 data consisted of ~40 million read pairs.",
            "title": "How to compare"
        },
        {
            "location": "/about/performance/#comparison-of-runtimes-in-serial-mode",
            "text": "Each run in  serial  mode was performed three times independently to account for\nthe fluctuation of run-time.     Each step of the work flow was accelerated by  celseq2 ,\ncompared to  CEL-Seq-pipeline , solely due to the new design with code\noptimization.   Demultiplexing reached  3-fold  speed.  Counting UMIs reached   4-fold  speed.  Overall reached  2-fold  speed.    In this comparison  CEL-Seq-pipeline  had an unfair advantage because\n    it internally used 15 threads for parallelizing alignment with  bowtie2  ,\n    while the new pipeline stringently used only one thread. Therefore,  celseq2 \n    spent more time than  CEL-Seq-pipeline  in this example.   Nevertheless,  celseq2  achieved an overall speed of more than 2-fold  compared to  CEL-Seq-pipeline .",
            "title": "Comparison of runtimes in serial mode"
        },
        {
            "location": "/about/performance/#comparison-of-runtimes-in-parallel-mode",
            "text": "In practice, users usually have multiple CPU or cores available, and\npipelines can take advantage of this fact by splitting up data into smaller\nchunks and processing them in parallel, and/or by running individual processes\n(e.g., alignment) using multiple threads.  Here the second comparison aimed to quantify the performance of the two pipelines\nin a more realistic scenario by running them on a 32-core server in  parallel \nmode  1 , and testing them on a dataset that consisted of two sets\nof CEL-Seq2 data  2  which totally consisted ~80 million read pairs.     Each step of the work flow was accelerated by  celseq2 ,\ncompared to  CEL-Seq-pipeline .   Demultiplexing reached  9-fold  speed.  Counting UMIs reached   4-fold  speed  3 .  Overall reached  3.5-fold  speed.    In this comparison  CEL-Seq-pipeline  again had an unfair advantage,\n    because the computational resources was as twice as what  celseq2  used for\n    UMI counting. Internally  CEL-Seq-pipeline  launched a fixed number parallel\n    jobs which was 50, instead of 30  3 .   Nevertheless,  celseq2  achieved a more than  3.5-fold \n    speed compared to  CEL-Seq-pipeline . In particular, the new design of work\n    flow of  celseq2  parallelized the demultiplexing step.",
            "title": "Comparison of runtimes in parallel mode"
        },
        {
            "location": "/about/performance/#summary",
            "text": "Compared to  CEL-Seq-pipeline ,  celseq2  achieved the following speed:  Demultiplexing: ~4N-fold, where N is the number of sets of CEL-Seq2 data.  Alignment: roughly same as expected since no optimization was involved.  Counting UMIs: ~4-fold.    In real case, the absolute runtime that took celseq2  to finish ~80 million\nread pairs was about 40 minutes  4  in this example.       The syntax to run pipelines in parallel mode was\ndifferent.  CEL-Seq-pipeline  set  proc=30  in its configuration file. And celseq2  requested 30 cores at most simply by setting  -j 30 .\u00a0 \u21a9    For the record, the two sets CEL-Seq2 data were indeed two copies\n of the same one set of data.\u00a0 \u21a9    It turned out that  proc  parameter of  CEL-Seq-pipeline  was not used\nwhen counting UMIs, but instead internally  CEL-Seq-pipeline  launched a fixed\nnumber parallel jobs which was always 50. See line-60  and line-81  in\nsource code. In this example, they were supposed to request same 30 cores so CEL-Seq-pipeline  had roughly twice number of jobs running for counting\nUMIs compared to  celseq2 .\u00a0 \u21a9 \u21a9    The absolute time varies among data sets. For example, it will\ntake less time if less proportional reads were qualified though same total number\nof read pairs (e.g., 40 million).\u00a0 \u21a9",
            "title": "Summary"
        },
        {
            "location": "/about/support_others/",
            "text": "List of supported techniques\n\u00b6\n\n\nThough \ncelseq2\n is dedicated to process CEL-Seq2 sequencing data, it is also\ncompatible to data generated in following contexts, because of the similar design\nprinciples of the UMI and cell barcodes.\n\n\n\n\nSpatial transcriptome data. \ncelseq2\n works similar to\n   \nst_pipeline\n,\n   except that \ncelseq2\n uses Bowtie2 for aligment while \nst_pipeline\n uses STAR.\n   After version 0.5.1 \ncelseq2\n is able to use STAR for ST as well.",
            "title": "Support other methods"
        },
        {
            "location": "/about/support_others/#list-of-supported-techniques",
            "text": "Though  celseq2  is dedicated to process CEL-Seq2 sequencing data, it is also\ncompatible to data generated in following contexts, because of the similar design\nprinciples of the UMI and cell barcodes.   Spatial transcriptome data.  celseq2  works similar to\n    st_pipeline ,\n   except that  celseq2  uses Bowtie2 for aligment while  st_pipeline  uses STAR.\n   After version 0.5.1  celseq2  is able to use STAR for ST as well.",
            "title": "List of supported techniques"
        },
        {
            "location": "/about/release_note/",
            "text": "Release Note\n\u00b6\n\n\n\n\n\n\n\n \nv0.5.3\n\u00b6\n\n\n \n2018-05-10\n\n\n \n2be1954\n\n\n \nFeatures\n\n\n\n\nPlot demultiplexing and alignment stats to help users assess their data.\n\n\nColumn names of UMI-count matrix is named in a format of 'BC-i-xxxx' to suit users needs.\n\n\n\n\n\n\n \nv0.5.2\n\u00b6\n\n\n \n2018-04-16\n\n\n \nFeatures\n\n\n\n\nGenerate QC plots for UMI-counts matrices. If ST is performed, an extra QC plot masked on grid is generated.\n\n\nAllow experienced users to feed extra parameters to align. See issue #10.\n\n\n\n\n\n\n \nv0.5.1\n\u00b6\n\n\n \n2018-04-05\n\n\n \nFeatures\n\n\n\n\nGet rid of the possible limitation about \"shared memory\" when STAR is used on\n  servers.\n\n\nSpatialTranscriptomics (ST) processing is able to use STAR aligner practically.\n\n\nOptionally remove intermediate files in a robust way.\n\n\n\n\n\n\n \nv0.4.8\n\u00b6\n\n\n \n2018-03-26\n\n\n \nFeatures\n\n\n\n\nRobust selection on type of genes, e.g., protein coding, lincRNA.\n\n\nHandle the case when all genes are needed.\n\n\nThe gene names are consistent to the in-house inDrop pipeline using\n  \ngenometools\n.\n\n\nHandle the GTF/GFF where \"gene_biotype\" attribute is not available.\n\n\n\n\n\n\nAutomatically remove intermediate files by \nsnakemake\n's \ntemp()\n function.\n\n\n\n\n\n\n \nv0.4.7\n\u00b6\n\n\n \n2018-03-23\n\n\n \nFeatures\n\n\n\n\nSupport \"gene_biotype\" selection.\n\n\nBetter support SpatialTranscriptome data.\n\n\ncelseq2-to-st\n understands \nexpr.csv\n file\n\n\ncelseq2-to-st\n recognizes \"(1 out of many)\" annotation inside GTF/GFF.\n\n\n\n\n\n\nRobust design of work flow.\n\n\n\n\n\n\n \nv0.4.4\n\u00b6\n\n\n \n2018-02-13\n\n\n \nFeatures\n\n\n\n\nImprove the design of \nsnakemake\n pipeline to avoid silent pre-inhibition.\n\n\nImprove running with STAR to avoid memory over-use.\n\n\n\n\n\n\n \nv0.4.1\n\u00b6\n\n\n \n2017-12-20\n\n\n \nFeatures\n\n\n\n\nSupport \nSTAR\n aligner.\n\n\nUpdate docs.\n\n\n\n\n\n\n \nv0.4.0\n\u00b6\n\n\n \n2017-10-04\n\n\n \nFeatures\n\n\n\n\nMore general API to specify UMI-BC design.\n\n\nSupport\n  \nst_pipeline\n.\n\n\n\n\n\n\n \nv0.3.0\n\u00b6\n\n\n \n2017-09-18\n\n\n \nFeatures\n\n\n\n\nSimulate CEL-Seq2 reads.\n\n\n Release package tests.\n\n\n\n\n\n\n \nv0.2.6\n\u00b6\n\n\n \n2017-09-14\n\n\n \nFeatures\n\n\n\n\nSupport \"reverse\" stranded by adding\nstranded\n parameter.\n\n\n\n\n\n\n \nv0.2.5\n\u00b6\n\n\n \n2017-08-22\n\n\n \nFeatures\n\n\n\n\nAdd \ncelseq2-slim\n to do storage management.\n\n\n\n\n\n\n \nv0.2.0\n\u00b6\n\n\n \n2017-08-12\n\n\n \nFeatures\n\n\n\n\nRelease command to generate templates to keep consistency.",
            "title": "Release note"
        },
        {
            "location": "/about/release_note/#release-note",
            "text": "",
            "title": "Release Note"
        },
        {
            "location": "/about/release_note/#v053",
            "text": "2018-05-10    2be1954    Features   Plot demultiplexing and alignment stats to help users assess their data.  Column names of UMI-count matrix is named in a format of 'BC-i-xxxx' to suit users needs.",
            "title": "v0.5.3"
        },
        {
            "location": "/about/release_note/#v052",
            "text": "2018-04-16    Features   Generate QC plots for UMI-counts matrices. If ST is performed, an extra QC plot masked on grid is generated.  Allow experienced users to feed extra parameters to align. See issue #10.",
            "title": "v0.5.2"
        },
        {
            "location": "/about/release_note/#v051",
            "text": "2018-04-05    Features   Get rid of the possible limitation about \"shared memory\" when STAR is used on\n  servers.  SpatialTranscriptomics (ST) processing is able to use STAR aligner practically.  Optionally remove intermediate files in a robust way.",
            "title": "v0.5.1"
        },
        {
            "location": "/about/release_note/#v048",
            "text": "2018-03-26    Features   Robust selection on type of genes, e.g., protein coding, lincRNA.  Handle the case when all genes are needed.  The gene names are consistent to the in-house inDrop pipeline using\n   genometools .  Handle the GTF/GFF where \"gene_biotype\" attribute is not available.    Automatically remove intermediate files by  snakemake 's  temp()  function.",
            "title": "v0.4.8"
        },
        {
            "location": "/about/release_note/#v047",
            "text": "2018-03-23    Features   Support \"gene_biotype\" selection.  Better support SpatialTranscriptome data.  celseq2-to-st  understands  expr.csv  file  celseq2-to-st  recognizes \"(1 out of many)\" annotation inside GTF/GFF.    Robust design of work flow.",
            "title": "v0.4.7"
        },
        {
            "location": "/about/release_note/#v044",
            "text": "2018-02-13    Features   Improve the design of  snakemake  pipeline to avoid silent pre-inhibition.  Improve running with STAR to avoid memory over-use.",
            "title": "v0.4.4"
        },
        {
            "location": "/about/release_note/#v041",
            "text": "2017-12-20    Features   Support  STAR  aligner.  Update docs.",
            "title": "v0.4.1"
        },
        {
            "location": "/about/release_note/#v040",
            "text": "2017-10-04    Features   More general API to specify UMI-BC design.  Support\n   st_pipeline .",
            "title": "v0.4.0"
        },
        {
            "location": "/about/release_note/#v030",
            "text": "2017-09-18    Features   Simulate CEL-Seq2 reads.   Release package tests.",
            "title": "v0.3.0"
        },
        {
            "location": "/about/release_note/#v026",
            "text": "2017-09-14    Features   Support \"reverse\" stranded by adding stranded  parameter.",
            "title": "v0.2.6"
        },
        {
            "location": "/about/release_note/#v025",
            "text": "2017-08-22    Features   Add  celseq2-slim  to do storage management.",
            "title": "v0.2.5"
        },
        {
            "location": "/about/release_note/#v020",
            "text": "2017-08-12    Features   Release command to generate templates to keep consistency.",
            "title": "v0.2.0"
        },
        {
            "location": "/about/LICENSE/",
            "text": "BSD 3-clause \"New\" or \"Revised\" License\n\n\nCopyright (c) 2017 New York University\n\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n\n\n\n\n\nRedistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n\n\n\n\n\nRedistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n\n\n\n\n\nNeither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\n\n\n\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "title": "License"
        },
        {
            "location": "/faq/",
            "text": "FAQ\n\u00b6\n\n\n Can \ncelseq2\n process data from other scRNA-seq methods? For example,\n    spatial transcriptome?\n\n\n See \nList of supported techniques\n.\n\n\nGet involved\n\u00b6\n\n\n How to contribute to \ncelseq2\n?\n\n\n Thanks for your interest. We suggest follow \"Guidelines to submit a Pull\nRequest\" of \nmxnet\n\n(see \nhere\n).\n\n\n How to contribute to user manuals?\n\n\n On top-right corner of every post there is an icon \n. Click it\nto edit the source contents which are in markdown format.",
            "title": "FAQ"
        },
        {
            "location": "/faq/#faq",
            "text": "Can  celseq2  process data from other scRNA-seq methods? For example,\n    spatial transcriptome?   See  List of supported techniques .",
            "title": "FAQ"
        },
        {
            "location": "/faq/#get-involved",
            "text": "How to contribute to  celseq2 ?   Thanks for your interest. We suggest follow \"Guidelines to submit a Pull\nRequest\" of  mxnet \n(see  here ).   How to contribute to user manuals?   On top-right corner of every post there is an icon  . Click it\nto edit the source contents which are in markdown format.",
            "title": "Get involved"
        }
    ]
}